{"tagline":"llum server","body":"Personis user model server\r\n==========================\r\n\r\nThe project consists of 4 parts (so far). \r\n   *  server - the user model server\r\n   * client - a command line client for manipulating a user model\r\n   * log-llum - a really simple web server logging app that uses the personis\r\n                server. Use as an example.\r\n   * activity_sensor - a sensor that logs period of user activity\r\n                  to personis.\r\n\r\nAll are implemented in python. Python2.7.4 has been the development version.\r\n\r\nInstallation\r\n============\r\n\r\nServer: \r\n  The server is most handily run using the runserver.sh script. Edit this\r\nscript to adjust the required paths and to pass in the correct config\r\nfiles. You can see that there are a few config files:\r\n   python Personis.py --models=../models/ --config=personis_server.conf --oauthconfig=oauth.yaml --admins=admins.yaml\r\n --models gives the models directory\r\n --config is the cherrypy server conf\r\n --oauthconfig is the config for the oauth CLIENT side of personis server\r\n --admins is the yaml file of people who can admin the server\r\n\r\n Personis server is a client to the google oauth service, and gets user\r\n information from google. \r\n\r\nIf you want to run Personis independently of the original setup (ie, you're\r\nnot in our research group) you can create your own google API project at https://code.google.com/apis/console#access and set up a new google \r\nAPI project to get your own client id and secret for personis. These go\r\nin oauth.yaml\r\nYou can find the user id for admins.yaml by looking for the long number\r\nin the url for your google+ profile.\r\n\r\nWhen you run the server, take note of the URI of the server.\r\n\r\nClients:\r\n  Clients require some information to associate with the personis server.\r\nThe server also needs each client registered.\r\n  Go to the server /list_clients page (ie the URI + /list_clients) (you need\r\n  to be a server admin)\r\n  Press the + button on the page to add an entry for the client. This will\r\n  give you a client id and secret, but you can change the friendly name, \r\n  icon url, and you will need to change the callback url to wherever you\r\n  installed the client. (command line clients just need a localhost url)\r\n  \r\nEach client has an oauth.yaml. Copy the client secret and id to the yaml file,\r\nadd the personis server url. Make sure the callback entry is correct.\r\n\r\nCommand line clients are just run (python xxx.py). They start a web browser\r\nto do the authentication stuff - just follow along.\r\n\r\nInner workings of server\r\n========================\r\n\r\nThe server exposes a number of URLs. Some are for authentication, some for\r\nadministration, and the rest as part of the personis protocol. Here are the \r\nmost important ones:\r\n\r\n  /authorize is the oauth2 authentication start point for clients logging in\r\n             (well actually the web browser trying to access the client)\r\n             so log-llum or mneme redirect web browsers here.\r\n  /list_clients is for administrators to register clients with personis\r\n  /list_apps is for users to administer which apps have permission to use\r\n             their model\r\n  /xxxx the 'default' method implements urls for the personis protocol, like\r\n        'ask' or 'tell'. Should only be accessed by json clients. not browsers.\r\n\r\nOf less importance for most people are:\r\n\r\nadmin:\r\n  /list_clients_save and /list_apps_save - for editing the client and app lists\r\n\r\nother auth bits:\r\n  /login - the auth point for users/admins loging into the /list pages\r\n  /logged_in - the callback from the google oauth servers. Should be called\r\n               when the request has been validated by google.\r\n  /allow - called when the user says that the client should have access\r\n           to their user model\r\n  /dissallow - opposite.\r\n  /request_token - called by the client to exchange their temporary access\r\n                   token for a real one. Usually the client is at this point\r\n                   the web service (like log-llum or mneme), not a web browser.\r\n                   Ideally (in fact MUST) this is only accessed over TLS/SSL.\r\n","name":"Personis","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}