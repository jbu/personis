EvidenceTypes = [
    "explicit", # given by the user  (given)
    "implicit", # observed by the machine (observation)
    "exmachina", # told (to the user) by the machine (told)
    "inferred", # evidence generated by inference (external or internal)
    "stereotype"] # evidence added by a stereotype

class Evidence:
    """ evidence object
        evidence_type   "explicit", # given by the user
                "implicit", # observed by the machine
                "exmachina", # told (to the user) by the machine
                "inferred", # evidence generated by a subscription inference 
                "stereotype"] # evidence added by a stereotype
        source  string indicating source of evidence
        value   any python object
        comment string with extra information about the evidence
        flags   a list of strings eg "goal"
        time    notional creation time optionally given by user
        creation_time actual time evidence item was created
        useby   timestamp evidence expires (if required)
    """
    def __init__(self, **kargs):
        self.flags = []
        self.evidence_type = None
        self.source = None
        self.owner = None
        self.value = None
        self.comment = None
        self.creation_time = None
        self.time = None  
        self.useby = None
        self.objectType = "Evidence"
        for k,v in kargs.items():
            self.__dict__[k] = v
        if not self.evidence_type in EvidenceTypes:
            raise TypeError, "bad evidence type %s"%(self.evidence_type)

    def __str__(self):
        return 'evidence: '+`self.__dict__`